events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    proxy_buffers 8 16k;
    proxy_buffer_size 32k;

    # BEST PRACTICE: This map directive correctly handles the WebSocket upgrade handshake.
    # It's more robust than hardcoding the "Connection" header.
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        listen 8080;
        server_name _;

        # OPTIMIZATION: Dedicated location for serving static assets like .js and .css
        # This allows for browser caching and avoids applying unnecessary headers.
        location /static {
            proxy_pass http://localhost:8501/static;
            expires 1d; # Tell browsers to cache static files for 1 day
            add_header Cache-Control "public, max-age=86400";
        }
        
        # Specific location for the Streamlit WebSocket stream.
        location /_stcore/stream {
            proxy_pass http://localhost:8501/_stcore/stream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_read_timeout 86400; # Keep WebSocket connection alive
        }

        # Health check for Cloud Run
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Main location for the application
        location / {
            # Your existing CSP and CORS headers are good, so they are kept here.
            set $csp_frame_ancestors "";
            if ($http_referer ~* "^https://(www\.)?12taste\.com") { set $csp_frame_ancestors "frame-ancestors https://www.12taste.com https://12taste.com 'self';"; }
            if ($http_referer = "") { set $csp_frame_ancestors "frame-ancestors 'self';"; }
            if ($http_referer ~* "^https://fifi-eu-121263692901\.europe-west1\.run\.app") { set $csp_frame_ancestors "frame-ancestors 'self';"; }
            if ($http_referer ~* "(about:|blob:)") { set $csp_frame_ancestors ""; }
            if ($csp_frame_ancestors != "") { add_header Content-Security-Policy $csp_frame_ancestors always; }
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "*" always;
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "*";
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
                add_header Access-Control-Allow-Headers "*";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type "text/plain; charset=utf-8";
                add_header Content-Length 0;
                return 204;
            }
            
            proxy_pass http://localhost:8501;
            
            # Use the robust map variable for the Connection header
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Frame-Options "";
            proxy_buffering off;
            proxy_read_timeout 86400; # Use a long timeout consistent with WebSocket
        }
    }
}
